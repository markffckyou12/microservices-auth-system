version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auth-postgres
    environment:
      POSTGRES_DB: auth_system
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/auth-service/db/migrations:/docker-entrypoint-initdb.d
    networks:
      - auth-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_system"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Session Management
  redis:
    image: redis:7-alpine
    container_name: auth-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - auth-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    container_name: auth-service
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://auth_user:auth_password@postgres:5432/auth_system
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth-network
    volumes:
      - ./services/auth-service:/app
      - /app/node_modules

  # User Service
  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    container_name: user-service
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://auth_user:auth_password@postgres:5432/auth_system
      REDIS_URL: redis://redis:6379
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth-network
    volumes:
      - ./services/user-service:/app
      - /app/node_modules

  # Session Service
  session-service:
    build:
      context: .
      dockerfile: services/session-service/Dockerfile
    container_name: session-service
    environment:
      NODE_ENV: development
      PORT: 3003
      REDIS_URL: redis://redis:6379
      SESSION_SECRET: your-super-secret-session-key-change-in-production
    ports:
      - "3003:3003"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - auth-network
    volumes:
      - ./services/session-service:/app
      - /app/node_modules

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: auth-frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_AUTH_URL: http://localhost:3001
      NEXT_PUBLIC_USER_URL: http://localhost:3002
      NEXT_PUBLIC_SESSION_URL: http://localhost:3003
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - user-service
      - session-service
    networks:
      - auth-network
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:
  redis_data:

networks:
  auth-network:
    driver: bridge 