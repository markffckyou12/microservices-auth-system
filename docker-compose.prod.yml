version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auth-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-auth_system}
      POSTGRES_USER: ${POSTGRES_USER:-auth_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-auth_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/user-service/migrations:/docker-entrypoint-initdb.d
    networks:
      - auth-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: auth-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - auth-network
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: auth-service-prod
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: ${DATABASE_URL:-postgresql://auth_user:auth_password@postgres:5432/auth_system}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      JWT_SECRET: ${JWT_SECRET}
      OAUTH_GOOGLE_CLIENT_ID: ${OAUTH_GOOGLE_CLIENT_ID}
      OAUTH_GOOGLE_CLIENT_SECRET: ${OAUTH_GOOGLE_CLIENT_SECRET}
      OAUTH_GITHUB_CLIENT_ID: ${OAUTH_GITHUB_CLIENT_ID}
      OAUTH_GITHUB_CLIENT_SECRET: ${OAUTH_GITHUB_CLIENT_SECRET}
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - auth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: user-service-prod
    environment:
      NODE_ENV: production
      PORT: 3003
      DATABASE_URL: ${DATABASE_URL:-postgresql://auth_user:auth_password@postgres:5432/auth_system}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "3003:3003"
    depends_on:
      - postgres
      - redis
    networks:
      - auth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Session Service
  session-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: session-service-prod
    environment:
      NODE_ENV: production
      PORT: 3002
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "3002:3002"
    depends_on:
      - redis
    networks:
      - auth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: auth-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - auth-service
      - user-service
      - session-service
    networks:
      - auth-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  auth-network:
    driver: bridge 